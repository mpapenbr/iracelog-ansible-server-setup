services:
  db:
    image: postgres:17
    restart: always
    # only used for development
    # ports:
    #   - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER_NAME} -d ${DB_SCHEMA}" ]
      interval: 5s
      timeout: 5s
      retries: 5

    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "5"

    environment:
      TZ: "Europe/Berlin"
      POSTGRES_DB: ${DB_SCHEMA}
      POSTGRES_USER: ${DB_USER_NAME}
      POSTGRES_PASSWORD: ${DB_USER_PASSWORD}

    networks:
      - somenet

  

  # iracelog-service-manager
  ism:
    image: ghcr.io/mpapenbr/iracelog-service-manager-go:{{ iracelog_ism_go_version }}
    restart: always
    networks:
      - somenet
      - traefiknet
    environment:
      TZ: "Europe/Berlin"
      ISM_ADMIN_TOKEN: ${ISM_ADMIN_TOKEN}      
      ISM_DB: postgresql://${DB_USER_NAME}:${DB_USER_PASSWORD}@db:5432/${DB_SCHEMA}
    command: |
      grpc -a 0.0.0.0:8080 --log-config logger-prod.yml 
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ism.rule=Host(`grpc.{{ main_domain }}`)"
      - "traefik.http.routers.ism.entrypoints=websecure"
      - "traefik.http.routers.ism.tls=true"
      - "traefik.http.routers.ism.tls.certresolver=myresolver"
      - "traefik.http.routers.ism.middlewares=mp-headers@file,compress-content@file"
      - "traefik.http.services.ism.loadbalancer.server.port=8080"
      - "traefik.docker.network=my_traefik_network"
      

  db-migrate:
    image: ghcr.io/mpapenbr/iracelog-service-manager-go:{{ iracelog_ism_go_version }}

    networks:
      - somenet

    environment:
      TZ: "Europe/Berlin"
      
      ISM_DB: postgresql://${DB_USER_NAME}:${DB_USER_PASSWORD}@db:5432/iracelog
    command: "migrate"

    depends_on:
      db:
        condition: service_healthy

  

  # the frontend
  iracelog:
    image: ghcr.io/mpapenbr/iracelog-web:{{ iracelog_frontend_version }}
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "5"
    networks:
      - somenet
      - traefiknet


    environment:
      TZ: "Europe/Berlin"
    volumes:
      - ./config/iracelog/frontend.json:/usr/share/nginx/html/config.json

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`iracelog.{{ main_domain }}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.middlewares=mp-headers@file,compress-content@file"
      - "traefik.docker.network=my_traefik_network"
  
  # the graphql api
  graphql:
    image: ghcr.io/mpapenbr/iracelog-graphql:{{ iracelog_graphql_version }}
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "5"
    networks:
      - somenet
      - traefiknet

    depends_on:
      - db

    environment:
      TZ: "Europe/Berlin"
      DATABASE_URL: postgresql://${DB_USER_NAME}:${DB_USER_PASSWORD}@db:5432/iracelog


    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphql.rule=Host(`graphql.{{ main_domain }}`)"
      - "traefik.http.routers.graphql.entrypoints=websecure"
      - "traefik.http.routers.graphql.tls=true"
      - "traefik.http.routers.graphql.tls.certresolver=myresolver"
      - "traefik.http.routers.graphql.middlewares=mp-headers@file,compress-content@file"
      - "traefik.docker.network=my_traefik_network"

  main-services:
    image: busybox
    command: sh -c "echo Starting services"
    depends_on:
      - db  
      - db-migrate
      - ism
      - iracelog
      - graphql


volumes:
  db-data:
  backup:



networks:
  somenet:
  traefiknet:
    name: my_traefik_network
    external: true



